   Exception: somevar = new eval().  :: eval is not a constructor
   Exception: somevar = new parseInt().  :: parseInt is not a constructor
   Exception: somevar = new parseFloat().  :: parseFloat is not a constructor
   Exception: somevar = new isNaN().  :: isNaN is not a constructor
   Exception: somevar = new isFinite().  :: isFinite is not a constructor
   Exception: somevar = new decodeURI().  :: decodeURI is not a constructor
   Exception: somevar = new encodeURI().  :: encodeURI is not a constructor
   Exception: somevar = new decodeURIComponent().  :: decodeURIComponent is not a constructor
   Exception: somevar = new encodeURIComponent().  :: encodeURIComponent is not a constructor
No Exception: somevar = new Object()
No Exception: somevar = new Function()
No Exception: somevar = new Array()
No Exception: somevar = new String()
No Exception: somevar = new Boolean()
No Exception: somevar = new Number()
No Exception: somevar = new Date()
No Exception: somevar = new RegExp()
No Exception: somevar = new Error()
No Exception: somevar = new EvalError()
No Exception: somevar = new RangeError()
No Exception: somevar = new ReferenceError()
No Exception: somevar = new SyntaxError()
No Exception: somevar = new TypeError()
No Exception: somevar = new URIError()
   Exception: somevar = new Object.prototype.toString().  :: toString is not a constructor
   Exception: somevar = new Object.prototype.toLocaleString().  :: toLocaleString is not a constructor
   Exception: somevar = new Object.prototype.valueOf().  :: valueOf is not a constructor
   Exception: somevar = new Object.prototype.hasOwnProperty().  :: hasOwnProperty is not a constructor
   Exception: somevar = new Object.prototype.isPrototypeOf().  :: isPrototypeOf is not a constructor
   Exception: somevar = new Object.prototype.propertyIsEnumerable().  :: propertyIsEnumerable is not a constructor
No Exception: somevar = new Function.prototype.constructor()
   Exception: somevar = new Function.prototype.toString().  :: toString is not a constructor
   Exception: somevar = new Function.prototype.apply().  :: apply is not a constructor
   Exception: somevar = new Function.prototype.call().  :: call is not a constructor
No Exception: somevar = new Array.prototype.constructor()
   Exception: somevar = new Array.prototype.toString().  :: toString is not a constructor
   Exception: somevar = new Array.prototype.toLocaleString().  :: toLocaleString is not a constructor
   Exception: somevar = new Array.prototype.concat().  :: concat is not a constructor
   Exception: somevar = new Array.prototype.join().  :: join is not a constructor
   Exception: somevar = new Array.prototype.pop().  :: pop is not a constructor
   Exception: somevar = new Array.prototype.push().  :: push is not a constructor
   Exception: somevar = new Array.prototype.reverse().  :: reverse is not a constructor
   Exception: somevar = new Array.prototype.shift().  :: shift is not a constructor
   Exception: somevar = new Array.prototype.slice().  :: slice is not a constructor
   Exception: somevar = new Array.prototype.sort().  :: sort is not a constructor
   Exception: somevar = new Array.prototype.splice().  :: splice is not a constructor
   Exception: somevar = new Array.prototype.unshift().  :: unshift is not a constructor
No Exception: somevar = new String.prototype.constructor()
   Exception: somevar = new String.prototype.toString().  :: toString is not a constructor
   Exception: somevar = new String.prototype.valueOf().  :: valueOf is not a constructor
   Exception: somevar = new String.prototype.charAt().  :: charAt is not a constructor
   Exception: somevar = new String.prototype.charCodeAt().  :: charCodeAt is not a constructor
   Exception: somevar = new String.prototype.concat().  :: concat is not a constructor
   Exception: somevar = new String.prototype.indexOf().  :: indexOf is not a constructor
   Exception: somevar = new String.prototype.lastIndexOf().  :: lastIndexOf is not a constructor
   Exception: somevar = new String.prototype.localeCompare().  :: localeCompare is not a constructor
   Exception: somevar = new String.prototype.match().  :: match is not a constructor
   Exception: somevar = new String.prototype.replace().  :: replace is not a constructor
   Exception: somevar = new String.prototype.search().  :: search is not a constructor
   Exception: somevar = new String.prototype.slice().  :: slice is not a constructor
   Exception: somevar = new String.prototype.split().  :: split is not a constructor
   Exception: somevar = new String.prototype.substring().  :: substring is not a constructor
   Exception: somevar = new String.prototype.toLowerCase().  :: toLowerCase is not a constructor
   Exception: somevar = new String.prototype.toLocaleLowerCase().  :: toLocaleLowerCase is not a constructor
   Exception: somevar = new String.prototype.toUpperCase().  :: toUpperCase is not a constructor
   Exception: somevar = new String.prototype.toLocaleUpperCase().  :: toLocaleUpperCase is not a constructor
   Exception: somevar = new String.prototype.anchor().  :: anchor is not a constructor
   Exception: somevar = new String.prototype.big().  :: big is not a constructor
   Exception: somevar = new String.prototype.blink().  :: blink is not a constructor
   Exception: somevar = new String.prototype.bold().  :: bold is not a constructor
   Exception: somevar = new String.prototype.fixed().  :: fixed is not a constructor
   Exception: somevar = new String.prototype.fontcolor().  :: fontcolor is not a constructor
   Exception: somevar = new String.prototype.fontsize().  :: fontsize is not a constructor
   Exception: somevar = new String.prototype.italics().  :: italics is not a constructor
   Exception: somevar = new String.prototype.link().  :: link is not a constructor
   Exception: somevar = new String.prototype.small().  :: small is not a constructor
   Exception: somevar = new String.prototype.strike().  :: strike is not a constructor
   Exception: somevar = new String.prototype.sub().  :: sub is not a constructor
   Exception: somevar = new String.prototype.sup().  :: sup is not a constructor
   Exception: somevar = new String.prototype.substr().  :: substr is not a constructor
   Exception: somevar = new String.fromCharCode().  :: fromCharCode is not a constructor
No Exception: somevar = new Boolean.prototype.constructor()
   Exception: somevar = new Boolean.prototype.toString().  :: toString is not a constructor
   Exception: somevar = new Boolean.prototype.valueOf().  :: valueOf is not a constructor
No Exception: somevar = new Number.prototype.constructor()
   Exception: somevar = new Number.prototype.toString().  :: toString is not a constructor
   Exception: somevar = new Number.prototype.toLocaleString().  :: toLocaleString is not a constructor
   Exception: somevar = new Number.prototype.valueOf().  :: valueOf is not a constructor
   Exception: somevar = new Number.prototype.toFixed().  :: toFixed is not a constructor
   Exception: somevar = new Number.prototype.toExponential().  :: toExponential is not a constructor
   Exception: somevar = new Number.prototype.toPrecision().  :: toPrecision is not a constructor
   Exception: somevar = new Math.abs().  :: abs is not a constructor
   Exception: somevar = new Math.acos().  :: acos is not a constructor
   Exception: somevar = new Math.asin().  :: asin is not a constructor
   Exception: somevar = new Math.atan().  :: atan is not a constructor
   Exception: somevar = new Math.atan2().  :: atan2 is not a constructor
   Exception: somevar = new Math.ceil().  :: ceil is not a constructor
   Exception: somevar = new Math.cos().  :: cos is not a constructor
   Exception: somevar = new Math.exp().  :: exp is not a constructor
   Exception: somevar = new Math.floor().  :: floor is not a constructor
   Exception: somevar = new Math.log().  :: log is not a constructor
   Exception: somevar = new Math.max().  :: max is not a constructor
   Exception: somevar = new Math.min().  :: min is not a constructor
   Exception: somevar = new Math.pow().  :: pow is not a constructor
   Exception: somevar = new Math.random().  :: random is not a constructor
   Exception: somevar = new Math.round().  :: round is not a constructor
   Exception: somevar = new Math.sin().  :: sin is not a constructor
   Exception: somevar = new Math.sqrt().  :: sqrt is not a constructor
   Exception: somevar = new Math.tan().  :: tan is not a constructor
No Exception: somevar = new Date.prototype.constructor()
   Exception: somevar = new Date.prototype.toString().  :: toString is not a constructor
   Exception: somevar = new Date.prototype.toDateString().  :: toDateString is not a constructor
   Exception: somevar = new Date.prototype.toTimeString().  :: toTimeString is not a constructor
   Exception: somevar = new Date.prototype.toLocaleString().  :: tolocaleString is not a constructor
   Exception: somevar = new Date.prototype.toLocaleDateString().  :: toLocaleDateString is not a constructor
   Exception: somevar = new Date.prototype.valueOf().  :: valueOf is not a constructor
   Exception: somevar = new Date.prototype.getTime().  :: getTime is not a constructor
   Exception: somevar = new Date.prototype.getFullYear().  :: getFullYear is not a constructor
   Exception: somevar = new Date.prototype.getUTCFullYear().  :: getUTCFullYear is not a constructor
   Exception: somevar = new Date.prototype.getMonth().  :: getMonth is not a constructor
   Exception: somevar = new Date.prototype.getUTCMonth().  :: getUTCMonth is not a constructor
   Exception: somevar = new Date.prototype.getDate().  :: getDate is not a constructor
   Exception: somevar = new Date.prototype.getUTCDate().  :: getUTCDate is not a constructor
   Exception: somevar = new Date.prototype.getDay().  :: getDay is not a constructor
   Exception: somevar = new Date.prototype.getUTCDay().  :: getUTCDay is not a constructor
   Exception: somevar = new Date.prototype.getHours().  :: getHours is not a constructor
   Exception: somevar = new Date.prototype.getUTCHours().  :: getUTCHours is not a constructor
   Exception: somevar = new Date.prototype.getMinutes().  :: getMinutes is not a constructor
   Exception: somevar = new Date.prototype.getUTCMinutes().  :: getUTCMinutes is not a constructor
   Exception: somevar = new Date.prototype.getSeconds().  :: getSeconds is not a constructor
   Exception: somevar = new Date.prototype.getUTCSeconds().  :: getUTCSeconds is not a constructor
   Exception: somevar = new Date.prototype.getMilliseconds().  :: getMilliseconds is not a constructor
   Exception: somevar = new Date.prototype.getUTCMilliseconds().  :: getUTCMilliseconds is not a constructor
   Exception: somevar = new Date.prototype.getTimezoneOffset().  :: getTimezoneOffset is not a constructor
   Exception: somevar = new Date.prototype.setTime().  :: setTime is not a constructor
   Exception: somevar = new Date.prototype.setMilliseconds().  :: setMilliseconds is not a constructor
   Exception: somevar = new Date.prototype.setUTCMilliseconds().  :: setUTCMilliseconds is not a constructor
   Exception: somevar = new Date.prototype.setSeconds().  :: setSeconds is not a constructor
   Exception: somevar = new Date.prototype.setUTCSeconds().  :: setUTCSeconds is not a constructor
   Exception: somevar = new Date.prototype.setMinutes().  :: setMinutes is not a constructor
   Exception: somevar = new Date.prototype.setUTCMinutes().  :: setUTCMinutes is not a constructor
   Exception: somevar = new Date.prototype.setHours().  :: setHours is not a constructor
   Exception: somevar = new Date.prototype.setUTCHours().  :: setUTCHours is not a constructor
   Exception: somevar = new Date.prototype.setDate().  :: setDate is not a constructor
   Exception: somevar = new Date.prototype.setUTCDate().  :: setUTCDate is not a constructor
   Exception: somevar = new Date.prototype.setMonth().  :: setMonth is not a constructor
   Exception: somevar = new Date.prototype.setUTCMonth().  :: setUTCMonth is not a constructor
   Exception: somevar = new Date.prototype.setFullYear().  :: setFullYear is not a constructor
   Exception: somevar = new Date.prototype.setUTCFullYear().  :: setUTCFullYear is not a constructor
   Exception: somevar = new Date.prototype.toUTCString().  :: toUTCString is not a constructor
   Exception: somevar = new Date.prototype.toGMTString().  :: toGMTString is not a constructor
   Exception: somevar = new Date.prototype.toLocaleTimeString().  :: toLocaleTimeString is not a constructor
   Exception: somevar = new Date.prototype.toUTCString().  :: toUTCString is not a constructor
   Exception: somevar = new Date.prototype.setYear().  :: setYear is not a constructor
   Exception: somevar = new Date.prototype.getYear().  :: getYear is not a constructor
   Exception: somevar = new Date.parse().  :: parse is not a constructor
   Exception: somevar = new Date.UTC().  :: UTC is not a constructor
No Exception: somevar = new RegExp.prototype.constructor()
   Exception: somevar = new RegExp.prototype.exec().  :: exec is not a constructor
   Exception: somevar = new RegExp.prototype.test().  :: test is not a constructor
   Exception: somevar = new RegExp.prototype.toString().  :: toString is not a constructor
No Exception: somevar = new Error.prototype.constructor()
   Exception: somevar = new Error.prototype.name().  :: Callee is not a function object
   Exception: somevar = new Error.prototype.message().  :: Callee is not a function object
   Exception: somevar = new Error.prototype.toString().  :: toString is not a constructor
